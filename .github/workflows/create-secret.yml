name: Bootstrap infrastructure

on:
  workflow_dispatch:
    inputs:
      AWS_ACCESS_KEY_ID:
        description: "Access Key ID with Permissions to deploy IAM, and OIDC"
        required: true
      AWS_REGION:
        description: "Region to deploy to."
        required: true
        type: choice
        options:
          - "ap-south-1"

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Git clone repository
        uses: actions/checkout@v1

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ github.event.inputs.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.AWS_REGION }}
          mask-aws-account-id: true

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: "14"

      - name: Install cdk
        run: npm i -g aws-cdk

      - name: Install dependencies
        run: npm i

      - name: Deploy stack
        run: |
          cdk synth
          cdk deploy --require-approval never --outputs-file cdk.out.json
        id: cdk_deploy

      - name: Set to stdout
        run: |
          echo IAM_ROLE_ARN=$(cat cdk.out.json | jq '.IssueGhActionsRestSecetsStack.assumeRole') >> $GITHUB_ENV
        id: role_stdout

      # Store the result in github secrets
      - name: Install deps
        run: |
          npm install tweetsodium@0.0.4
      - uses: actions/github-script@v6
        env:
          SECRET_TO_ATTACH: '${{ env.IAM_ROLE_ARN }}'
        with:
            github-token: ${{ secrets.TEST_WRITE_TOKEN }}
            script: |
              const sodium = require("tweetsodium");

              const publicKey = await github.rest.actions.getRepoPublicKey({
                owner: context.repo.owner,
                repo: context.repo.repo,
              });

              // encrypt the value using instructions here https://docs.github.com/en/rest/actions/secrets#create-or-update-an-organization-secret  
              const key = publicKey.data.key;
              const secretToAdd = process.env.SECRET_TO_ATTACH; // This would be coming from outputs of `serverless.yml` framework
              const messageBytes = Buffer.from(secretToAdd);
              const keyBytes = Buffer.from(key, "base64");
              const encryptedBytes = sodium.seal(messageBytes, keyBytes);
              const encryptedSecret = Buffer.from(encryptedBytes).toString("base64");

              await github.rest.actions.createOrUpdateRepoSecret({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  secret_name: 'DUMMY_AWS_IAM_ROLE_ASSUME',
                  encrypted_value: encryptedSecret,
                  key_id: publicKey.data.key_id,
              });
